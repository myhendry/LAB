{
  "address": "0x79D0ca23101F53c71db639D711fB5D531Aa48a8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2ae9706bf7d8bad49e4993702e61f25e80990ec6606532a95339ae597c44b42e",
  "receipt": {
    "to": null,
    "from": "0x890E135d8b79d29B4585515c1a21305863cEc6dC",
    "contractAddress": "0x79D0ca23101F53c71db639D711fB5D531Aa48a8E",
    "transactionIndex": 11,
    "gasUsed": "907751",
    "logsBloom": "0x
    "blockHash": "0x6aeef09f8af027b62ce86f83a626d1e83c81109330c05cfc0622d539cba8bc0f",
    "transactionHash": "0x2ae9706bf7d8bad49e4993702e61f25e80990ec6606532a95339ae597c44b42e",
    "logs": [],
    "blockNumber": 10905394,
    "cumulativeGasUsed": "2471595",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 3,
  "solcInputHash": "f4a924393725193347371446a011a22a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"H Lim\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/* \\nStyle Guide\\n1. Pragma Statements\\n2. Import Statements\\nErrors\\n3. Interfaces\\n4. Libraries\\n5. Contracts\\n\\nInside each contract, library or interface, use the following order:\\n1. Type Declarations\\n2. State Variables\\n3. Events\\n4. Modifiers\\n5. Functions\\n\\n*/\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\n// natspec format\\n/** @title FundMe\\n*   @author H Lim\\n*   @notice This contract is to demo a sample funding contract\\n*   @dev This implements price feeds as our library\\n*/\\n// solc --userdoc --devdoc ex1.sol\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n        return priceFeed.version();\\n    }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\",\"keccak256\":\"0x8a465235666118c073f994e3e997cc1412736679ec956ba7a6fa48bc47953137\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x419e870dd6d10bca766d7b6ad8f38b135cb116d3bfe60d65b3e9ebfab9f51eea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000ffd38038062000ffd8339818101604052810190610034919061011f565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b610ea1806200015c6000396000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100c257610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100a26102d6565b6040516100af91906107dc565b60405180910390f35b6100c0610374565b005b3480156100ce57600080fd5b506100e960048036038101906100e4919061085a565b6105b6565b6040516100f691906107dc565b60405180910390f35b34801561010b57600080fd5b506101146105ce565b60405161012191906107dc565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b506101496105db565b6040516101569190610896565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108dd565b610601565b6040516101939190610896565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064090919063ffffffff16565b101561021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021390610967565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a91906109b6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080738a753747a1fa494ec906ce90e9f37563a8af630e90508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561033657600080fd5b505afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610a21565b91505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fb576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a65760006001828154811061042157610420610a4e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049e90610a7d565b9150506103fe565b50600067ffffffffffffffff8111156104c2576104c1610ac6565b5b6040519080825280602002602001820160405280156104f05781602001602082028036833780820191505090505b506001908051906020019061050692919061071c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052d90610b26565b60006040518083038185875af1925050503d806000811461056a576040519150601f19603f3d011682016040523d82523d6000602084013e61056f565b606091505b50509050806105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa90610b87565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061061157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061064c8361067c565b90506000670de0b6b3a764000085836106659190610ba7565b61066f9190610c30565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610cd9565b5050509150506402540be400816107149190610d54565b915050919050565b828054828255906000526020600020908101928215610795579160200282015b828111156107945782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061073c565b5b5090506107a291906107a6565b5090565b5b808211156107bf5760008160009055506001016107a7565b5090565b6000819050919050565b6107d6816107c3565b82525050565b60006020820190506107f160008301846107cd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610827826107fc565b9050919050565b6108378161081c565b811461084257600080fd5b50565b6000813590506108548161082e565b92915050565b6000602082840312156108705761086f6107f7565b5b600061087e84828501610845565b91505092915050565b6108908161081c565b82525050565b60006020820190506108ab6000830184610887565b92915050565b6108ba816107c3565b81146108c557600080fd5b50565b6000813590506108d7816108b1565b92915050565b6000602082840312156108f3576108f26107f7565b5b6000610901848285016108c8565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610951601b8361090a565b915061095c8261091b565b602082019050919050565b6000602082019050818103600083015261098081610944565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c1826107c3565b91506109cc836107c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0157610a00610987565b5b828201905092915050565b600081519050610a1b816108b1565b92915050565b600060208284031215610a3757610a366107f7565b5b6000610a4584828501610a0c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a88826107c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610abb57610aba610987565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b10600083610af5565b9150610b1b82610b00565b600082019050919050565b6000610b3182610b03565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b71600b8361090a565b9150610b7c82610b3b565b602082019050919050565b60006020820190508181036000830152610ba081610b64565b9050919050565b6000610bb2826107c3565b9150610bbd836107c3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bf657610bf5610987565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c3b826107c3565b9150610c46836107c3565b925082610c5657610c55610c01565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8081610c61565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b6000819050919050565b610cb681610ca3565b8114610cc157600080fd5b50565b600081519050610cd381610cad565b92915050565b600080600080600060a08688031215610cf557610cf46107f7565b5b6000610d0388828901610c8e565b9550506020610d1488828901610cc4565b9450506040610d2588828901610a0c565b9350506060610d3688828901610a0c565b9250506080610d4788828901610c8e565b9150509295509295909350565b6000610d5f82610ca3565b9150610d6a83610ca3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610da957610da8610987565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de657610de5610987565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2357610e22610987565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6057610e5f610987565b5b82820290509291505056fea2646970667358221220a42e6cf6947bcd9c36396695bdaf66c9757147f8cfbddd3976735f5df50da14164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100c257610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100a26102d6565b6040516100af91906107dc565b60405180910390f35b6100c0610374565b005b3480156100ce57600080fd5b506100e960048036038101906100e4919061085a565b6105b6565b6040516100f691906107dc565b60405180910390f35b34801561010b57600080fd5b506101146105ce565b60405161012191906107dc565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b506101496105db565b6040516101569190610896565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108dd565b610601565b6040516101939190610896565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064090919063ffffffff16565b101561021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021390610967565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a91906109b6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080738a753747a1fa494ec906ce90e9f37563a8af630e90508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561033657600080fd5b505afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610a21565b91505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fb576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a65760006001828154811061042157610420610a4e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049e90610a7d565b9150506103fe565b50600067ffffffffffffffff8111156104c2576104c1610ac6565b5b6040519080825280602002602001820160405280156104f05781602001602082028036833780820191505090505b506001908051906020019061050692919061071c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052d90610b26565b60006040518083038185875af1925050503d806000811461056a576040519150601f19603f3d011682016040523d82523d6000602084013e61056f565b606091505b50509050806105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa90610b87565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061061157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061064c8361067c565b90506000670de0b6b3a764000085836106659190610ba7565b61066f9190610c30565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610cd9565b5050509150506402540be400816107149190610d54565b915050919050565b828054828255906000526020600020908101928215610795579160200282015b828111156107945782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061073c565b5b5090506107a291906107a6565b5090565b5b808211156107bf5760008160009055506001016107a7565b5090565b6000819050919050565b6107d6816107c3565b82525050565b60006020820190506107f160008301846107cd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610827826107fc565b9050919050565b6108378161081c565b811461084257600080fd5b50565b6000813590506108548161082e565b92915050565b6000602082840312156108705761086f6107f7565b5b600061087e84828501610845565b91505092915050565b6108908161081c565b82525050565b60006020820190506108ab6000830184610887565b92915050565b6108ba816107c3565b81146108c557600080fd5b50565b6000813590506108d7816108b1565b92915050565b6000602082840312156108f3576108f26107f7565b5b6000610901848285016108c8565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610951601b8361090a565b915061095c8261091b565b602082019050919050565b6000602082019050818103600083015261098081610944565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c1826107c3565b91506109cc836107c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0157610a00610987565b5b828201905092915050565b600081519050610a1b816108b1565b92915050565b600060208284031215610a3757610a366107f7565b5b6000610a4584828501610a0c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a88826107c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610abb57610aba610987565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b10600083610af5565b9150610b1b82610b00565b600082019050919050565b6000610b3182610b03565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b71600b8361090a565b9150610b7c82610b3b565b602082019050919050565b60006020820190508181036000830152610ba081610b64565b9050919050565b6000610bb2826107c3565b9150610bbd836107c3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bf657610bf5610987565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c3b826107c3565b9150610c46836107c3565b925082610c5657610c55610c01565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8081610c61565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b6000819050919050565b610cb681610ca3565b8114610cc157600080fd5b50565b600081519050610cd381610cad565b92915050565b600080600080600060a08688031215610cf557610cf46107f7565b5b6000610d0388828901610c8e565b9550506020610d1488828901610cc4565b9450506040610d2588828901610a0c565b9350506060610d3688828901610a0c565b9250506080610d4788828901610c8e565b9150509295509295909350565b6000610d5f82610ca3565b9150610d6a83610ca3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610da957610da8610987565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de657610de5610987565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2357610e22610987565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6057610e5f610987565b5b82820290509291505056fea2646970667358221220a42e6cf6947bcd9c36396695bdaf66c9757147f8cfbddd3976735f5df50da14164736f6c63430008080033",
  "devdoc": {
    "author": "H Lim",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "FundMe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}